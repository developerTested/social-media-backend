generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum Privacy {
  PUBLIC
  PRIVATE
}

model Emoji {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  value      String   @db.VarChar(255)
  code       String   @db.VarChar(255)
  text       String   @db.VarChar(255)
  emoji_type String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Password_Resets {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  email     String   @db.VarChar(255)
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "password_resets_email_index")
}

model User {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  username     String   @unique
  display_name String?  @db.VarChar(255)
  email        String   @unique(map: "users_email_unique") @db.VarChar(255)
  password     String   @db.VarChar(255)
  bio          String?  @db.Text
  birthday     String?  @db.VarChar(255)
  gender       String   @default("Male") @db.VarChar(255)
  avatar       String?  @db.VarChar(255)
  active       Boolean?
  is_admin     Boolean?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         UserRole @default(USER)

  posts            Post[] // One-to-many relationship: one user can have multiple posts
  comments         Comment[] // One-to-many relationship: one user can have multiple comments
  photos           Photo[] // One-to-many relationship: one user can have multiple photos
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Message {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId BigInt @db.UnsignedBigInt

  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId BigInt @db.UnsignedBigInt
}

model Post {
  id        BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  content   String
  authorId  BigInt    @db.UnsignedBigInt
  author    User      @relation(fields: [authorId], references: [id])
  privacy   Privacy   @default(PUBLIC)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[] // One-to-many relationship: one post can have multiple comments
  photos    Photo[] // One-to-many relationship: one post can have multiple photos
}

model Comment {
  id       BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  content  String
  likes    Int       @default(0)
  post     Post      @relation(fields: [postId], references: [id])
  postId   BigInt    @db.UnsignedBigInt
  user     User      @relation(fields: [userId], references: [id])
  userId   BigInt    @db.UnsignedBigInt
  parent   Comment?  @relation("ReplyToComment", fields: [parentId], references: [id]) // Opposite relation for replies
  parentId BigInt?   @db.UnsignedBigInt // Nullable field to represent the parent comment
  replies  Comment[] @relation("ReplyToComment") // Self-referencing relation for replies

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  url         String
  description String?
  user        User    @relation(fields: [userId], references: [id])
  userId      BigInt  @db.UnsignedBigInt
  postId      BigInt  @db.UnsignedBigInt
  post        Post?   @relation(fields: [postId], references: [id]) // Optional one-to-one relationship: a photo may belong to a post
  privacy     Privacy @default(PUBLIC)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
